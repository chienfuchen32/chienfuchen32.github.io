<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xml:lang="en-us" xmlns:atom="http://www.w3.org/2005/Atom"><channel><language>en-us</language><lastBuildDate>Sat, 26 Jul 2025 22:38:40 +0800</lastBuildDate><link>https://chienfuchen32.github.io/tags/algorithm/</link><atom:link href="https://chienfuchen32.github.io/tags/algorithm/rss.xml" hreflang="en-us" rel="self" type="application/rss+xml"/><atom:link href="https://chienfuchen32.github.io/tags/algorithm/" hreflang="en-us" rel="alternate" type="text/html"/><atom:link href="https://chienfuchen32.github.io/tags/algorithm/rss.xml" hreflang="en-us" rel="alternate" type="application/rss+xml"/><title>Algorithm · Tags · Jeff&rsquo;s note</title><item><description><![CDATA[<h2 id=purpose>Purpose</h2><p>TODO</p><h2 id=example-from-leetcode-51-n-queens>Example from LeetCode 51. N-Queens</h2><p><a href=https://leetcode.com/problems/n-queens/description/ rel=external>problem link</a></p><h3 id=implementation>Implementation</h3><p>Backtracking all possible placement, check if it is queen attack range.</p><div class=highlight><pre tabindex=0 style=background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-python3 data-lang=python3><span style=display:flex><span><span style=color:#00f>class</span> <span style=color:#2b91af>Solution</span>:
</span></span><span style=display:flex><span>    <span style=color:#00f>def</span> solveNQueens(self, n: int) -&gt; List[List[str]]:
</span></span><span style=display:flex><span>        place = [-1 <span style=color:#00f>for</span> _ <span style=color:#00f>in</span> range(n)]
</span></span><span style=display:flex><span>        row = 0
</span></span><span style=display:flex><span>        place[0] = 0
</span></span><span style=display:flex><span>        ans = []
</span></span><span style=display:flex><span>        <span style=color:#00f>while</span> <span style=color:#00f>True</span>:
</span></span><span style=display:flex><span>            <span style=color:#00f>if</span> self.is_valid(place, n) <span style=color:#00f>is</span> <span style=color:#00f>True</span>:
</span></span><span style=display:flex><span>                <span style=color:#00f>if</span> row == n - 1:
</span></span><span style=display:flex><span>                    ans.append([<span style=color:#a31515>&#39;&#39;</span>.join(b <span style=color:#00f>for</span> b <span style=color:#00f>in</span> self.board[i])
</span></span><span style=display:flex><span>                            <span style=color:#00f>for</span> i <span style=color:#00f>in</span> range(n)])
</span></span><span style=display:flex><span>                <span style=color:#00f>else</span>:
</span></span><span style=display:flex><span>                    row += 1
</span></span><span style=display:flex><span>            <span style=color:#00f>for</span> j <span style=color:#00f>in</span> range(row, -1, -1):
</span></span><span style=display:flex><span>                <span style=color:#00f>if</span> place[j] == n - 1:
</span></span><span style=display:flex><span>                    place[j] = -1
</span></span><span style=display:flex><span>                    row -= 1
</span></span><span style=display:flex><span>                <span style=color:#00f>else</span>:
</span></span><span style=display:flex><span>                    place[j] += 1
</span></span><span style=display:flex><span>                    <span style=color:#00f>break</span>
</span></span><span style=display:flex><span>                <span style=color:#00f>if</span> j == 0 <span style=color:#00f>and</span> place[j] == -1:
</span></span><span style=display:flex><span>                    <span style=color:#00f>return</span> ans
</span></span><span style=display:flex><span>            <span style=color:#00f>else</span>:
</span></span><span style=display:flex><span>                place[row] += 1
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>    <span style=color:#00f>def</span> is_valid(self, place, n)-&gt;bool:
</span></span><span style=display:flex><span>        self.board = [[<span style=color:#a31515>&#39;.&#39;</span> <span style=color:#00f>for</span> _ <span style=color:#00f>in</span> range(n)] <span style=color:#00f>for</span> _ <span style=color:#00f>in</span> range(n)]
</span></span><span style=display:flex><span>        <span style=color:#00f>for</span> i <span style=color:#00f>in</span> range(n):
</span></span><span style=display:flex><span>            <span style=color:#00f>if</span> place[i] != -1:
</span></span><span style=display:flex><span>                self.board[i][place[i]] = <span style=color:#a31515>&#39;Q&#39;</span>
</span></span><span style=display:flex><span>        <span style=color:green># row and col</span>
</span></span><span style=display:flex><span>        <span style=color:#00f>for</span> i <span style=color:#00f>in</span> range(n):
</span></span><span style=display:flex><span>            <span style=color:#00f>for</span> j <span style=color:#00f>in</span> range(i+1, n):
</span></span><span style=display:flex><span>                <span style=color:#00f>if</span> place[j] != -1 <span style=color:#00f>and</span> place[i] == place[j]:
</span></span><span style=display:flex><span>                    <span style=color:#00f>return</span> <span style=color:#00f>False</span>
</span></span><span style=display:flex><span>        <span style=color:green># cross</span>
</span></span><span style=display:flex><span>        <span style=color:#00f>for</span> i <span style=color:#00f>in</span> range(n):
</span></span><span style=display:flex><span>            <span style=color:#00f>if</span> place[i] == -1:
</span></span><span style=display:flex><span>                <span style=color:#00f>continue</span>
</span></span><span style=display:flex><span>            <span style=color:#00f>for</span> j <span style=color:#00f>in</span> range(n):
</span></span><span style=display:flex><span>                <span style=color:#00f>if</span> j == 0:
</span></span><span style=display:flex><span>                    <span style=color:#00f>continue</span>
</span></span><span style=display:flex><span>                o = i + j
</span></span><span style=display:flex><span>                p = place[i] + j
</span></span><span style=display:flex><span>                <span style=color:#00f>if</span>  o &gt;= 0 <span style=color:#00f>and</span> o &lt; n <span style=color:#00f>and</span> \
</span></span><span style=display:flex><span>                    p &gt;= 0 <span style=color:#00f>and</span> p &lt; n:
</span></span><span style=display:flex><span>                    <span style=color:#00f>if</span> self.board[o][p] == <span style=color:#a31515>&#39;Q&#39;</span>:
</span></span><span style=display:flex><span>                        <span style=color:#00f>return</span> <span style=color:#00f>False</span>
</span></span><span style=display:flex><span>                o = i + j
</span></span><span style=display:flex><span>                p = place[i] - j
</span></span><span style=display:flex><span>                <span style=color:#00f>if</span>  o &gt;= 0 <span style=color:#00f>and</span> o &lt; n <span style=color:#00f>and</span> \
</span></span><span style=display:flex><span>                    p &gt;= 0 <span style=color:#00f>and</span> p &lt; n:
</span></span><span style=display:flex><span>                    <span style=color:#00f>if</span> self.board[o][p] == <span style=color:#a31515>&#39;Q&#39;</span>:
</span></span><span style=display:flex><span>                        <span style=color:#00f>return</span> <span style=color:#00f>False</span>
</span></span><span style=display:flex><span>                o = i - j
</span></span><span style=display:flex><span>                p = place[i] + j
</span></span><span style=display:flex><span>                <span style=color:#00f>if</span>  o &gt;= 0 <span style=color:#00f>and</span> o &lt; n <span style=color:#00f>and</span> \
</span></span><span style=display:flex><span>                    p &gt;= 0 <span style=color:#00f>and</span> p &lt; n:
</span></span><span style=display:flex><span>                    <span style=color:#00f>if</span> self.board[o][p] == <span style=color:#a31515>&#39;Q&#39;</span>:
</span></span><span style=display:flex><span>                        <span style=color:#00f>return</span> <span style=color:#00f>False</span>
</span></span><span style=display:flex><span>                o = i - j
</span></span><span style=display:flex><span>                p = place[i] - j
</span></span><span style=display:flex><span>                <span style=color:#00f>if</span>  o &gt;= 0 <span style=color:#00f>and</span> o &lt; n <span style=color:#00f>and</span> \
</span></span><span style=display:flex><span>                    p &gt;= 0 <span style=color:#00f>and</span> p &lt; n:
</span></span><span style=display:flex><span>                    <span style=color:#00f>if</span> self.board[o][p] == <span style=color:#a31515>&#39;Q&#39;</span>:
</span></span><span style=display:flex><span>                        <span style=color:#00f>return</span> <span style=color:#00f>False</span>
</span></span><span style=display:flex><span>        <span style=color:#00f>return</span> <span style=color:#00f>True</span></span></span></code></pre></div>]]></description><guid isPermaLink="false">tag:chienfuchen32.github.io,2023-06-14:/posts/n-queen-problem/</guid><link>https://chienfuchen32.github.io/posts/n-queen-problem/</link><atom:link href="https://chienfuchen32.github.io/posts/n-queen-problem/" hreflang="en-us" rel="alternate" type="text/html"/><pubDate>Wed, 14 Jun 2023 20:13:52 +0800</pubDate><title>N Queen Problem</title></item><item><description><![CDATA[<h2 id=purpose>Purpose</h2><p>TODO</p><h2 id=example-from-leetcode-146-lru-cache>Example from LeetCode 146. LRU Cache</h2><p><a href=https://leetcode.com/problems/lru-cache/ rel=external>problem link</a></p><h3 id=implementation>Implementation</h3><p>TODO commemt</p><div class=highlight><pre tabindex=0 style=background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-python3 data-lang=python3><span style=display:flex><span><span style=color:#00f>class</span> <span style=color:#2b91af>Node</span>:
</span></span><span style=display:flex><span>    <span style=color:#00f>def</span> __init__(self, key, value, prev=<span style=color:#00f>None</span>, nxt=<span style=color:#00f>None</span>):
</span></span><span style=display:flex><span>        self.key = key
</span></span><span style=display:flex><span>        self.value = value
</span></span><span style=display:flex><span>        self.prev = prev
</span></span><span style=display:flex><span>        self.next = nxt
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span><span style=color:#00f>class</span> <span style=color:#2b91af>DoubleLinkList</span>:
</span></span><span style=display:flex><span>    <span style=color:#00f>def</span> __init__(self):
</span></span><span style=display:flex><span>        self.head = <span style=color:#00f>None</span>
</span></span><span style=display:flex><span>        self.tail = <span style=color:#00f>None</span>
</span></span><span style=display:flex><span>        self.length = 0
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>    <span style=color:#00f>def</span> add_node_to_tail(self, node: Node) -&gt; <span style=color:#00f>None</span>:
</span></span><span style=display:flex><span>        self.length += 1
</span></span><span style=display:flex><span>        <span style=color:#00f>if</span> self.head <span style=color:#00f>is</span> <span style=color:#00f>None</span>:
</span></span><span style=display:flex><span>            self.head = node
</span></span><span style=display:flex><span>            <span style=color:#00f>return</span> 
</span></span><span style=display:flex><span>        <span style=color:#00f>if</span> self.tail <span style=color:#00f>is</span> <span style=color:#00f>None</span>:
</span></span><span style=display:flex><span>            self.tail = node
</span></span><span style=display:flex><span>            self.tail.prev = self.head
</span></span><span style=display:flex><span>            self.head.next = self.tail
</span></span><span style=display:flex><span>            <span style=color:#00f>return</span>
</span></span><span style=display:flex><span>        self.tail.next = node
</span></span><span style=display:flex><span>        node.prev = self.tail
</span></span><span style=display:flex><span>        self.tail = node
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>    <span style=color:#00f>def</span> remove_node_from_head(self) -&gt; int:
</span></span><span style=display:flex><span>        self.length -= 1
</span></span><span style=display:flex><span>        old_key = self.head.key
</span></span><span style=display:flex><span>        self.head = self.head.next
</span></span><span style=display:flex><span>        <span style=color:#00f>if</span> self.head <span style=color:#00f>is</span> <span style=color:#00f>not</span> <span style=color:#00f>None</span>:
</span></span><span style=display:flex><span>            self.head.prev = <span style=color:#00f>None</span>
</span></span><span style=display:flex><span>        <span style=color:#00f>return</span> old_key
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>    <span style=color:#00f>def</span> remove_node_from_node(self, node) -&gt; <span style=color:#00f>None</span>:
</span></span><span style=display:flex><span>        self.length -= 1
</span></span><span style=display:flex><span>        <span style=color:#00f>if</span> node.prev <span style=color:#00f>is</span> <span style=color:#00f>not</span> <span style=color:#00f>None</span>:
</span></span><span style=display:flex><span>            node.prev.next = node.next
</span></span><span style=display:flex><span>        <span style=color:#00f>if</span> node.next <span style=color:#00f>is</span> <span style=color:#00f>not</span> <span style=color:#00f>None</span>:
</span></span><span style=display:flex><span>            node.next.prev = node.prev
</span></span><span style=display:flex><span>        <span style=color:#00f>if</span> node == self.tail:
</span></span><span style=display:flex><span>            <span style=color:#00f>if</span> self.tail.prev <span style=color:#00f>is</span> <span style=color:#00f>not</span> <span style=color:#00f>None</span>:
</span></span><span style=display:flex><span>                self.tail.prev.next = <span style=color:#00f>None</span>
</span></span><span style=display:flex><span>            self.tail = self.tail.prev
</span></span><span style=display:flex><span>        <span style=color:#00f>if</span> node == self.head:
</span></span><span style=display:flex><span>            <span style=color:#00f>if</span> self.head.next <span style=color:#00f>is</span> <span style=color:#00f>not</span> <span style=color:#00f>None</span>:
</span></span><span style=display:flex><span>                self.head.next.prev = <span style=color:#00f>None</span>
</span></span><span style=display:flex><span>            self.head = self.head.next
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>    <span style=color:#00f>def</span> print_all_node(self) -&gt; <span style=color:#00f>None</span>:
</span></span><span style=display:flex><span>        ptr = self.head
</span></span><span style=display:flex><span>        <span style=color:#00f>while</span> ptr <span style=color:#00f>is</span> <span style=color:#00f>not</span> <span style=color:#00f>None</span>:
</span></span><span style=display:flex><span>            ptr = ptr.next
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span><span style=color:#00f>class</span> <span style=color:#2b91af>LRUCache</span>:
</span></span><span style=display:flex><span>    <span style=color:#00f>def</span> __init__(self, capacity: int):
</span></span><span style=display:flex><span>        self.cache = {} <span style=color:green># {key: Node}</span>
</span></span><span style=display:flex><span>        self.link_list = DoubleLinkList()
</span></span><span style=display:flex><span>        self.capacity = capacity
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>    <span style=color:#00f>def</span> get(self, key: int) -&gt; int:
</span></span><span style=display:flex><span>        <span style=color:#00f>if</span> self.cache.get(key, <span style=color:#00f>None</span>) <span style=color:#00f>is</span> <span style=color:#00f>not</span> <span style=color:#00f>None</span>:
</span></span><span style=display:flex><span>            node = self.cache[key]
</span></span><span style=display:flex><span>            value = node.value
</span></span><span style=display:flex><span>            new_node = Node(key, value)
</span></span><span style=display:flex><span>            self.link_list.remove_node_from_node(node)
</span></span><span style=display:flex><span>            self.cache[key] = new_node
</span></span><span style=display:flex><span>            self.link_list.add_node_to_tail(new_node)
</span></span><span style=display:flex><span>            <span style=color:#00f>return</span> value
</span></span><span style=display:flex><span>        <span style=color:#00f>return</span> -1
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>    <span style=color:#00f>def</span> put(self, key: int, value: int) -&gt; <span style=color:#00f>None</span>:
</span></span><span style=display:flex><span>        <span style=color:#00f>if</span> self.cache.get(key, <span style=color:#00f>None</span>) <span style=color:#00f>is</span> <span style=color:#00f>not</span> <span style=color:#00f>None</span>:
</span></span><span style=display:flex><span>            node = self.cache[key]
</span></span><span style=display:flex><span>            <span style=color:#00f>del</span> self.cache[key]
</span></span><span style=display:flex><span>            self.link_list.remove_node_from_node(node)
</span></span><span style=display:flex><span>        <span style=color:#00f>else</span>:
</span></span><span style=display:flex><span>            <span style=color:#00f>if</span> self.link_list.length &gt;= self.capacity:
</span></span><span style=display:flex><span>                head_key = self.link_list.remove_node_from_head()
</span></span><span style=display:flex><span>                <span style=color:#00f>del</span> self.cache[head_key]
</span></span><span style=display:flex><span>        new_node = Node(key, value)
</span></span><span style=display:flex><span>        self.cache[key] = new_node
</span></span><span style=display:flex><span>        self.link_list.add_node_to_tail(new_node)</span></span></code></pre></div>]]></description><guid isPermaLink="false">tag:chienfuchen32.github.io,2023-05-31:/posts/least-recently-used-cache/</guid><link>https://chienfuchen32.github.io/posts/least-recently-used-cache/</link><atom:link href="https://chienfuchen32.github.io/posts/least-recently-used-cache/" hreflang="en-us" rel="alternate" type="text/html"/><pubDate>Wed, 31 May 2023 20:10:53 +0800</pubDate><title>Least Recently Used Cache</title></item></channel></rss>