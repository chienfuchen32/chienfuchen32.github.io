<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes on New Blog</title><link>https://chienfuchen32.github.io/tags/kubernetes/</link><description>Recent content in Kubernetes on New Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 15 Apr 2022 15:45:07 +0800</lastBuildDate><atom:link href="https://chienfuchen32.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Nginx Ingress Controller K8S Guide</title><link>https://chienfuchen32.github.io/posts/nginx-ingress-controller-k8s-guide/</link><pubDate>Fri, 15 Apr 2022 15:45:07 +0800</pubDate><guid>https://chienfuchen32.github.io/posts/nginx-ingress-controller-k8s-guide/</guid><description>Nginx 介紹 Nginx是非同步框架的網頁伺服器，也可以用作反向代理、負載平衡器和HTTP快取。 設置範例 server { listen 80; listen [::]:80; server_name localhost; listen 443 ssl default_server; ssl_certificate /tls/server.crt; ssl_certificate_key /tls/server.key; #charset koi8-r; #access_log /var/log/nginx/host.access.log main; location / { #root /usr/share/nginx/html; #index index.html index.htm; proxy_pass http://192.168.24.100:9090/; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &amp;#34;Upgrade&amp;#34;; proxy_set_header Host $host; proxy_connect_timeout 60s; proxy_read_timeout 300s; proxy_send_timeout 300s; } location /socket.io { proxy_pass http://192.168.24.100:9091/; #Version 1.1 is recommended for use with keepalive connections proxy_http_version 1.1; #WebSocket proxy_set_header Upgrade $http_upgrade; #WebSocket proxy_set_header Connection $connection_upgrade; #WebSocket proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto https; proxy_set_header Cookie $http_cookie; } error_page 500 502 503 504 /50x.</description></item><item><title>Kubernetes Guide for Developer</title><link>https://chienfuchen32.github.io/posts/k8s-guide-for-developer/</link><pubDate>Fri, 18 Mar 2022 14:32:45 +0800</pubDate><guid>https://chienfuchen32.github.io/posts/k8s-guide-for-developer/</guid><description>Environment Before you try to use any client tool connect to Kubernetes, please check the endpoint field &amp;ldquo;server&amp;rdquo; of &amp;ldquo;cluster&amp;rdquo; credential config file.
Please make sure you&amp;rsquo;re able connect with the kube-apiserver.
For instance, example below shown here is &amp;ldquo;k8s-cluster&amp;rdquo;
apiVersion: v1 kind: Config clusters: - name: team-a-admin@kubernetes cluster: server: &amp;#39;https://k8s-cluster:8443&amp;#39; certificate-authority-data: &amp;gt;- xxxxx users: - name: team-a-admin user: token: &amp;gt;- xxxxx contexts: - name: team-a-admin@kubernetes context: user: team-a-admin cluster: team-a-admin@kubernetes namespace: team-a current-context: team-a-admin@kubernetes This example is based on self-host Kubernetes v1.</description></item><item><title>On-Premises K8s Installation</title><link>https://chienfuchen32.github.io/posts/on-prem-k8s-installation/</link><pubDate>Fri, 18 Sep 2020 10:00:04 +0800</pubDate><guid>https://chienfuchen32.github.io/posts/on-prem-k8s-installation/</guid><description>Load balancer &amp;amp; VIP HAProxy &amp;amp; Keepalived
Init HA control plane &amp;amp; worker node sudo kubeadm init --control-plane-endpoint &amp;#34;LOAD_BALANCER_DNS:LOAD_BALANCER_PORT&amp;#34; --upload-certs ... ... You can now join any number of control-plane node by running the following command on each as a root: kubeadm join 192.168.0.200:6443 --token 9vr73a.a8uxyaju799qwdjv --discovery-token-ca-cert-hash sha256:7c2e69131a36ae2a042a339b33381c6d0d43887e2de83720eff5359e26aec866 --control-plane --certificate-key f8902e114ef118304e561c3ecd4d0b543adc226b7a07f675f56564185ffe0c07 Please note that the certificate-key gives access to cluster sensitive data, keep it secret! As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use kubeadm init phase upload-certs to reload certs afterward.</description></item></channel></rss>