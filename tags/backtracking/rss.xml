<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xml:lang="en-us" xmlns:atom="http://www.w3.org/2005/Atom"><channel><language>en-us</language><lastBuildDate>Sat, 26 Jul 2025 22:38:40 +0800</lastBuildDate><link>https://chienfuchen32.github.io/tags/backtracking/</link><atom:link href="https://chienfuchen32.github.io/tags/backtracking/rss.xml" hreflang="en-us" rel="self" type="application/rss+xml"/><atom:link href="https://chienfuchen32.github.io/tags/backtracking/" hreflang="en-us" rel="alternate" type="text/html"/><atom:link href="https://chienfuchen32.github.io/tags/backtracking/rss.xml" hreflang="en-us" rel="alternate" type="application/rss+xml"/><title>Backtracking · Tags · Jeff&rsquo;s note</title><item><description><![CDATA[<h2 id=purpose>Purpose</h2><p>TODO</p><h2 id=example-from-leetcode-51-n-queens>Example from LeetCode 51. N-Queens</h2><p><a href=https://leetcode.com/problems/n-queens/description/ rel=external>problem link</a></p><h3 id=implementation>Implementation</h3><p>Backtracking all possible placement, check if it is queen attack range.</p><div class=highlight><pre tabindex=0 style=background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4><code class=language-python3 data-lang=python3><span style=display:flex><span><span style=color:#00f>class</span> <span style=color:#2b91af>Solution</span>:
</span></span><span style=display:flex><span>    <span style=color:#00f>def</span> solveNQueens(self, n: int) -&gt; List[List[str]]:
</span></span><span style=display:flex><span>        place = [-1 <span style=color:#00f>for</span> _ <span style=color:#00f>in</span> range(n)]
</span></span><span style=display:flex><span>        row = 0
</span></span><span style=display:flex><span>        place[0] = 0
</span></span><span style=display:flex><span>        ans = []
</span></span><span style=display:flex><span>        <span style=color:#00f>while</span> <span style=color:#00f>True</span>:
</span></span><span style=display:flex><span>            <span style=color:#00f>if</span> self.is_valid(place, n) <span style=color:#00f>is</span> <span style=color:#00f>True</span>:
</span></span><span style=display:flex><span>                <span style=color:#00f>if</span> row == n - 1:
</span></span><span style=display:flex><span>                    ans.append([<span style=color:#a31515>&#39;&#39;</span>.join(b <span style=color:#00f>for</span> b <span style=color:#00f>in</span> self.board[i])
</span></span><span style=display:flex><span>                            <span style=color:#00f>for</span> i <span style=color:#00f>in</span> range(n)])
</span></span><span style=display:flex><span>                <span style=color:#00f>else</span>:
</span></span><span style=display:flex><span>                    row += 1
</span></span><span style=display:flex><span>            <span style=color:#00f>for</span> j <span style=color:#00f>in</span> range(row, -1, -1):
</span></span><span style=display:flex><span>                <span style=color:#00f>if</span> place[j] == n - 1:
</span></span><span style=display:flex><span>                    place[j] = -1
</span></span><span style=display:flex><span>                    row -= 1
</span></span><span style=display:flex><span>                <span style=color:#00f>else</span>:
</span></span><span style=display:flex><span>                    place[j] += 1
</span></span><span style=display:flex><span>                    <span style=color:#00f>break</span>
</span></span><span style=display:flex><span>                <span style=color:#00f>if</span> j == 0 <span style=color:#00f>and</span> place[j] == -1:
</span></span><span style=display:flex><span>                    <span style=color:#00f>return</span> ans
</span></span><span style=display:flex><span>            <span style=color:#00f>else</span>:
</span></span><span style=display:flex><span>                place[row] += 1
</span></span><span style=display:flex><span>
</span></span><span style=display:flex><span>    <span style=color:#00f>def</span> is_valid(self, place, n)-&gt;bool:
</span></span><span style=display:flex><span>        self.board = [[<span style=color:#a31515>&#39;.&#39;</span> <span style=color:#00f>for</span> _ <span style=color:#00f>in</span> range(n)] <span style=color:#00f>for</span> _ <span style=color:#00f>in</span> range(n)]
</span></span><span style=display:flex><span>        <span style=color:#00f>for</span> i <span style=color:#00f>in</span> range(n):
</span></span><span style=display:flex><span>            <span style=color:#00f>if</span> place[i] != -1:
</span></span><span style=display:flex><span>                self.board[i][place[i]] = <span style=color:#a31515>&#39;Q&#39;</span>
</span></span><span style=display:flex><span>        <span style=color:green># row and col</span>
</span></span><span style=display:flex><span>        <span style=color:#00f>for</span> i <span style=color:#00f>in</span> range(n):
</span></span><span style=display:flex><span>            <span style=color:#00f>for</span> j <span style=color:#00f>in</span> range(i+1, n):
</span></span><span style=display:flex><span>                <span style=color:#00f>if</span> place[j] != -1 <span style=color:#00f>and</span> place[i] == place[j]:
</span></span><span style=display:flex><span>                    <span style=color:#00f>return</span> <span style=color:#00f>False</span>
</span></span><span style=display:flex><span>        <span style=color:green># cross</span>
</span></span><span style=display:flex><span>        <span style=color:#00f>for</span> i <span style=color:#00f>in</span> range(n):
</span></span><span style=display:flex><span>            <span style=color:#00f>if</span> place[i] == -1:
</span></span><span style=display:flex><span>                <span style=color:#00f>continue</span>
</span></span><span style=display:flex><span>            <span style=color:#00f>for</span> j <span style=color:#00f>in</span> range(n):
</span></span><span style=display:flex><span>                <span style=color:#00f>if</span> j == 0:
</span></span><span style=display:flex><span>                    <span style=color:#00f>continue</span>
</span></span><span style=display:flex><span>                o = i + j
</span></span><span style=display:flex><span>                p = place[i] + j
</span></span><span style=display:flex><span>                <span style=color:#00f>if</span>  o &gt;= 0 <span style=color:#00f>and</span> o &lt; n <span style=color:#00f>and</span> \
</span></span><span style=display:flex><span>                    p &gt;= 0 <span style=color:#00f>and</span> p &lt; n:
</span></span><span style=display:flex><span>                    <span style=color:#00f>if</span> self.board[o][p] == <span style=color:#a31515>&#39;Q&#39;</span>:
</span></span><span style=display:flex><span>                        <span style=color:#00f>return</span> <span style=color:#00f>False</span>
</span></span><span style=display:flex><span>                o = i + j
</span></span><span style=display:flex><span>                p = place[i] - j
</span></span><span style=display:flex><span>                <span style=color:#00f>if</span>  o &gt;= 0 <span style=color:#00f>and</span> o &lt; n <span style=color:#00f>and</span> \
</span></span><span style=display:flex><span>                    p &gt;= 0 <span style=color:#00f>and</span> p &lt; n:
</span></span><span style=display:flex><span>                    <span style=color:#00f>if</span> self.board[o][p] == <span style=color:#a31515>&#39;Q&#39;</span>:
</span></span><span style=display:flex><span>                        <span style=color:#00f>return</span> <span style=color:#00f>False</span>
</span></span><span style=display:flex><span>                o = i - j
</span></span><span style=display:flex><span>                p = place[i] + j
</span></span><span style=display:flex><span>                <span style=color:#00f>if</span>  o &gt;= 0 <span style=color:#00f>and</span> o &lt; n <span style=color:#00f>and</span> \
</span></span><span style=display:flex><span>                    p &gt;= 0 <span style=color:#00f>and</span> p &lt; n:
</span></span><span style=display:flex><span>                    <span style=color:#00f>if</span> self.board[o][p] == <span style=color:#a31515>&#39;Q&#39;</span>:
</span></span><span style=display:flex><span>                        <span style=color:#00f>return</span> <span style=color:#00f>False</span>
</span></span><span style=display:flex><span>                o = i - j
</span></span><span style=display:flex><span>                p = place[i] - j
</span></span><span style=display:flex><span>                <span style=color:#00f>if</span>  o &gt;= 0 <span style=color:#00f>and</span> o &lt; n <span style=color:#00f>and</span> \
</span></span><span style=display:flex><span>                    p &gt;= 0 <span style=color:#00f>and</span> p &lt; n:
</span></span><span style=display:flex><span>                    <span style=color:#00f>if</span> self.board[o][p] == <span style=color:#a31515>&#39;Q&#39;</span>:
</span></span><span style=display:flex><span>                        <span style=color:#00f>return</span> <span style=color:#00f>False</span>
</span></span><span style=display:flex><span>        <span style=color:#00f>return</span> <span style=color:#00f>True</span></span></span></code></pre></div>]]></description><guid isPermaLink="false">tag:chienfuchen32.github.io,2023-06-14:/posts/n-queen-problem/</guid><link>https://chienfuchen32.github.io/posts/n-queen-problem/</link><atom:link href="https://chienfuchen32.github.io/posts/n-queen-problem/" hreflang="en-us" rel="alternate" type="text/html"/><pubDate>Wed, 14 Jun 2023 20:13:52 +0800</pubDate><title>N Queen Problem</title></item></channel></rss>